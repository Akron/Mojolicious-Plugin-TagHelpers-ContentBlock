=pod

=encoding utf8

=head1 NAME

Mojolicious::Plugin::TagHelpers::ContentBlock - Mojolicious Plugin for Content Blocks


=head1 SYNOPSIS

  use Mojolicious::Lite;

  plugin 'TagHelpers::ContentBlock';

  # Add snippets to a named content block, e.g. from a plugin
  app->content_block(
    admin => {
      inline => "<%= link_to 'Edit' => '/edit' %>"
    }
  );

  # ... or in a controller:
  get '/' => sub {
    my $c = shift;
    $c->content_block(
      admin => {
        inline => "<%= link_to 'Logout' => '/logout' %>",
        position => 20
       }
    );
    $c->render(template => 'home');
  };

  app->start;

  __DATA__
  @@ home.html.ep
  %# and call it in a template
  %= content_block 'admin'

=head1 DESCRIPTION

L<Mojolicious::Plugin::TagHelpers::ContentBlock> is a L<Mojolicious> plugin
to create pluggable content blocks for page views.


=head1 METHODS

L<Mojolicious::Plugin::TagHelpers::ContentBlock> inherits all methods from
L<Mojolicious::Plugin> and implements the following new one.


=head2 register

  # Mojolicious
  $app->plugin('TagHelpers::ContentBlock');

  # Mojolicious::Lite
  plugin 'TagHelpers::ContentBlock';

Called when registering the plugin.
Accepts an optional hash containing information
on content blocks to be registered on startup.

  # Mojolicious
  $app->plugin(
    'TagHelpers::ContentBlock' => {
      admin => [
        {
          inline => '<%= link_to "Edit" => "/edit" %>',
          position => 10
        },
        {
          inline => '<%= link_to "Logout" => "/logout" %>',
          position => 15
        }
      ],
      footer => {
        inline => '<%= link_to "Privacy" => "/privacy" %>',
        position => 5
      }
    }
  );

Content blocks are defined by their name followed by
either a hash of content block information or an array
of content block information hashes.
See L<content_block> for further information.

The content block hash can be set as part
of the configuration file with the key C<TagHelpers-ContentBlock> or
on registration (that will be merged with the configuration).


=head1 HELPERS

=head2 content_block

  # In a plugin
  $app->content_block(
    admin => {
      inline => '<%= link_to 'Edit' => '/edit' %>'
    }
  );

  # From a controller
  $c->content_block(
    admin => {
      inline => '<%= link_to 'Edit' => '/edit' %>',
      position => 40
    }
  );

  # From a template
  % content_block 'admin', { position => 9 }, begin
    <%= link_to 'Edit' => '/edit' %>
  % end

  # Calling the content block
  %= content_block 'admin'

Add content to a named content block (like with
L<content_for|Mojolicious::Plugin::DefaultHelpers/content_for>)
or call the contents from a template.

In difference to L<content_for|Mojolicious::Plugin::DefaultHelpers/content_for>,
content of the content block can be defined in a global cache during
startup or as part of the applications configuration.

Supported content block parameters, passed as a hash, are C<template> or C<inline>.
Additionally a numeric C<position> value can be passed, defining the order of elements
in the content block. If C<position> is omitted,
the default position is C<0>. Position values may be positive or negative.

When calling the content blocks, an additional list parameter L<separator>
can define a string to be placed between all blocks.

  # Calling the content block
  %= content_block 'admin', separator => '<hr />'


=head2 content_block_ok

  # In a template
  % if (content_block_ok('admin')) {
    <ul>
    %= content_block 'admin'
    </ul>
  % };

Check if a C<content_block> contains elements.


=head1 DEPENDENCIES

L<Mojolicious>.


=head1 AVAILABILITY

  https://github.com/Akron/Mojolicious-Plugin-TagHelpers-ContentBlock


=head1 COPYRIGHT AND LICENSE

Copyright (C) 2015-2021, L<Nils Diewald|https://www.nils-diewald.de/>.

This program is free software, you can redistribute it
and/or modify it under the terms of the Artistic License version 2.0.


=cut
